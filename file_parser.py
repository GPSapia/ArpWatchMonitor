import re
import time
import sys
from ctypes import *

if (len(sys.argv) != 3):
	print ("Usage: python3 file_parse.py iface_name log_file_name")
	sys.exit(1)

beginning_line_regex = re.compile ("^Subject:(.+) .+$")
ip_address_regex = re.compile ("ip address: (.+)")
old_eth_regex = re.compile ("old ethernet address: (.+)")
new_eth_regex = re.compile ("ethernet address: (.+)")
end_line_regex = re.compile ("From")

in_msg = False
msg_type = "none"
ip_addr = "none"
old_ethernet_address = "none"
eth_address = "none"

c_file = "./utils.so"
send_function = CDLL (c_file)

message = ""                                                                    #payload of the packet

dst_mac = ""
eth_type = "0x1001"

#the first command line argument is the iface name on which starting the capture;

send_function.init_session (bytes(sys.argv[1], 'ascii'))							#changed hardcoded iface name

#the second command line argument is the name of the log file generated by arpwatch

with open (sys.argv[2]) as f:
    while (True):
        for line in f:
            beginning_match = beginning_line_regex.search(line)
            if (beginning_match):
                in_msg = True
                msg_type = beginning_match.group(1)
                message += msg_type + "\n"

            if (in_msg):
                ip_match = ip_address_regex.search(line)
                old_eth_match = old_eth_regex.search(line)
                new_eth_match = new_eth_regex.search(line)
                end_line_match = end_line_regex.search(line)

                if (ip_match):
                    ip_addr = ip_match.group(1)
                    message += "ip addr  ----->  " + ip_addr + "\n"

                elif (old_eth_match):
                    old_ethernet_address = old_eth_match.group(1)

                elif (new_eth_match):
                    eth_address = new_eth_match.group(1)
                    message += "ethernet address  ----->  " + eth_address + "\n"

                elif (end_line_match):
                    in_msg = False

                    if (old_ethernet_address == "none"):
                        send_function.send_packet (b"enp3s0", eth_address.encode(), eth_type.encode(), message.encode(), len(message))
                    else:
                        send_function.send_packet (b"enp3s0", old_ethernet_address.encode(), eth_type.encode(), message.encode(), len(message))
                        message = ""

                    old_ethernet_address = "none"
    time.sleep(60)
